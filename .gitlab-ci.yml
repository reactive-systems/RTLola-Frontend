stages:
  - check-format
  - clippy
  - check-ignored-tests
  - test
  #  - test-windows
  - test-nightly
  - docs

default:
  before_script:
    - cd crates

variables:
  CARGO_HOME: $CI_PROJECT_DIR/.cargo

####### Use cargo to check the source code formatting #######

# Todo:
#  Remove: - rustup default nightly-2021-02-11
#  Change: cargo +nightly-2021-02-11 fmt -> cargo +nightly fmt
# Once rustfmt ist available in current nighlty release

format:reporting:
  tags:
    - docker
  stage: check-format
  image: rustlang/rust:nightly
  script:
    - rustup default nightly-2021-02-11
    - rustc --version && cargo --version
    - cargo +nightly-2021-02-11 fmt -p rtlola-reporting --verbose -- --check

format:parser:
  tags:
    - docker
  stage: check-format
  image: rustlang/rust:nightly
  script:
    - rustup default nightly-2021-02-11
    - rustc --version && cargo --version
    - cargo +nightly-2021-02-11 fmt -p rtlola-parser --verbose -- --check

format:macros:
  tags:
    - docker
  stage: check-format
  image: rustlang/rust:nightly
  script:
    - rustup default nightly-2021-02-11
    - rustc --version && cargo --version
    - cargo +nightly-2021-02-11 fmt -p rtlola-macros --verbose -- --check

format:hir:
  tags:
    - docker
  stage: check-format
  image: rustlang/rust:nightly
  script:
    - rustup default nightly-2021-02-11
    - rustc --version && cargo --version
    - cargo +nightly-2021-02-11 fmt -p rtlola-hir --verbose -- --check

format:frontend:
  tags:
    - docker
  stage: check-format
  image: rustlang/rust:nightly
  script:
    - rustup default nightly-2021-02-11
    - rustc --version && cargo --version
    - cargo +nightly-2021-02-11 fmt -p rtlola-frontend --verbose -- --check


####### Use cargo to run clippy (Rust linter) #######

clippy:reporting:
  tags:
    - docker
  stage: clippy
  image: rust:latest
  cache:
    key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - rustup component add clippy
    - rustc --version && cargo --version
    - cargo clippy -p rtlola-reporting

clippy:parser:
  tags:
    - docker
  stage: clippy
  image: rust:latest
  cache:
    key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - rustup component add clippy
    - rustc --version && cargo --version
    - cargo clippy -p rtlola-parser

clippy:macros:
  tags:
    - docker
  stage: clippy
  image: rust:latest
  cache:
    key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - rustup component add clippy
    - rustc --version && cargo --version
    - cargo clippy -p rtlola-macros

clippy:hir:
  tags:
    - docker
  stage: clippy
  image: rust:latest
  cache:
    key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - rustup component add clippy
    - rustc --version && cargo --version
    - cargo clippy -p rtlola-hir

clippy:frontend:
  tags:
    - docker
  stage: clippy
  image: rust:latest
  cache:
    key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - rustup component add clippy
    - rustc --version && cargo --version
    - cargo clippy -p rtlola-frontend

####### Check that every ignored test has an accompanying comment #######
ignored:reporting:
  tags:
    - docker
  stage: check-ignored-tests
  image: alpine:latest
  script:
    - apk update && apk add --no-cache bash
    - ./check_ignored_tests_without_comment.sh rtlola-reporting

ignored:parser:
  tags:
    - docker
  stage: check-ignored-tests
  image: alpine:latest
  script:
    - apk update && apk add --no-cache bash
    - ./check_ignored_tests_without_comment.sh rtlola-parser

ignored:macros:
  tags:
    - docker
  stage: check-ignored-tests
  image: alpine:latest
  script:
    - apk update && apk add --no-cache bash
    - ./check_ignored_tests_without_comment.sh rtlola-macros

ignored:hir:
  tags:
    - docker
  stage: check-ignored-tests
  image: alpine:latest
  script:
    - apk update && apk add --no-cache bash
    - ./check_ignored_tests_without_comment.sh rtlola-hir

ignored:frontend:
  tags:
    - docker
  stage: check-ignored-tests
  image: alpine:latest
  script:
    - apk update && apk add --no-cache bash
    - ./check_ignored_tests_without_comment.sh rtlola-frontend

####### Use cargo to test the project on stable toolchain #######
test:reporting:
  tags:
    - docker
  stage: test
  image: rust:latest
  cache:
    key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends libpcap-dev
    - rustc --version && cargo --version
    - cargo test -p rtlola-reporting --verbose

test:parser:
  tags:
    - docker
  stage: test
  image: rust:latest
  cache:
    key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends libpcap-dev
    - rustc --version && cargo --version
    - cargo test -p rtlola-parser --verbose

test:macros:
  tags:
    - docker
  stage: test
  image: rust:latest
  cache:
    key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends libpcap-dev
    - rustc --version && cargo --version
    - cargo test -p rtlola-macros --verbose

test:hir:
  tags:
    - docker
  stage: test
  image: rust:latest
  cache:
    key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends libpcap-dev
    - rustc --version && cargo --version
    - cargo test -p rtlola-hir --verbose

test:frontend:
  tags:
    - docker
  stage: test
  image: rust:latest
  cache:
    key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends libpcap-dev
    - rustc --version && cargo --version
    - cargo test -p rtlola-frontend --verbose

####### Use cargo to test the project on stable toolchain on windows #######
# Todo: Reactivate when windows runner is working
# test:windows:
#   stage: test-windows
#   tags:
#     - windows
#     - rust
#   script:
#     - rustup update
#     - rustc --version
#     - cargo --version
#     - cargo test --all --verbose

####### Use cargo to test the project on nightly toolchain #######
cargo:test-nightly:
  tags:
    - docker
  stage: test-nightly
  image: rustlang/rust:nightly
  variables:
    CARGO_INCREMENTAL: 0
    RUSTFLAGS: "-Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort"
    RUSTDOCFLAGS: "-Cpanic=abort"
  script:
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends libpcap-dev python3-pip
    - pip3 install junit-xml
    - cargo install grcov
    - cargo install cargo2junit
    - rustc --version && cargo --version      # Print version info for debugging
    - cargo build
    - (cargo test -- -Z unstable-options --format json | cargo2junit > results.xml) || true # ignore the return code so that we can show the complete output (including ignored tests)
    - grcov ./target/debug/ -s . -t html --llvm --branch --ignore-not-existing -o ./target/debug/coverage/
    - cat ./target/debug/coverage/index.html
    - cargo test --all --verbose
  allow_failure: true
  coverage: '/linesPercentage \w+">\d+\.\d+ /'
  artifacts:
    when: always
    paths:
      - target/debug/coverage/
    reports:
      junit: results.xml


####### Use cargo to test the docs for broken links #######

doc:reporting:
  tags:
    - docker
  stage: docs
  image: rust:latest
  variables:
    RUSTDOCFLAGS: "-Dwarnings"
  allow_failure: true
  cache:
    key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - rustc --version && cargo --version
    - cargo doc -p rtlola-reporting --no-deps --verbose

doc:parser:
  tags:
    - docker
  stage: docs
  image: rust:latest
  variables:
    RUSTDOCFLAGS: "-Dwarnings"
  allow_failure: true
  cache:
    key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - rustc --version && cargo --version
    - cargo doc -p rtlola-parser --no-deps --verbose

doc:macros:
  tags:
    - docker
  stage: docs
  image: rust:latest
  variables:
    RUSTDOCFLAGS: "-Dwarnings"
  allow_failure: true
  cache:
    key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - rustc --version && cargo --version
    - cargo doc -p rtlola-macros --no-deps --verbose

doc:hir:
  tags:
    - docker
  stage: docs
  image: rust:latest
  variables:
    RUSTDOCFLAGS: "-Dwarnings"
  allow_failure: true
  cache:
    key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - rustc --version && cargo --version
    - cargo doc -p rtlola-hir --no-deps --verbose

doc:frontend:
  tags:
    - docker
  stage: docs
  image: rust:latest
  variables:
    RUSTDOCFLAGS: "-Dwarnings"
  allow_failure: true
  cache:
    key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - rustc --version && cargo --version
    - cargo doc -p rtlola-frontend --no-deps --verbose
