stages:
  - check-format
  - clippy
  - check-ignored-tests
  - test
  - additional-test
  - docs

default:
  before_script:
    - cd crates

variables:
  CARGO_HOME: $CI_PROJECT_DIR/.cargo

####### Use cargo to check the source code formatting #######

# Todo:
#  Remove: - rustup default nightly-2021-02-11
#  Change: cargo +nightly-2021-02-11 fmt -> cargo +nightly fmt
# Once rustfmt ist available in current nighlty release

format:reporting:
  tags:
    - docker
  stage: check-format
  image: instrumentisto/rust:nightly-2021-02-11
  script:
    - rustc --version && cargo --version
    - cargo +nightly fmt -p rtlola-reporting --verbose -- --check

format:parser:
  tags:
    - docker
  stage: check-format
  image: instrumentisto/rust:nightly-2021-02-11
  script:
    - rustc --version && cargo --version
    - cargo +nightly fmt -p rtlola-parser --verbose -- --check

format:macros:
  tags:
    - docker
  stage: check-format
  image: instrumentisto/rust:nightly-2021-02-11
  script:
    - rustc --version && cargo --version
    - cargo +nightly fmt -p rtlola-macros --verbose -- --check

format:hir:
  tags:
    - docker
  stage: check-format
  image: instrumentisto/rust:nightly-2021-02-11
  script:
    - rustc --version && cargo --version
    - cargo +nightly fmt -p rtlola-hir --verbose -- --check

format:frontend:
  tags:
    - docker
  stage: check-format
  image: instrumentisto/rust:nightly-2021-02-11
  script:
    - rustc --version && cargo --version
    - cargo +nightly fmt -p rtlola-frontend --verbose -- --check


####### Use cargo to run clippy (Rust linter) #######

clippy:reporting:
  tags:
    - docker
  stage: clippy
  image: rust:latest
  needs: ["format:reporting"]
  cache:
    key: "reporting"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - rustup component add clippy
    - rustc --version && cargo --version
    - cargo clippy -p rtlola-reporting

clippy:parser:
  tags:
    - docker
  stage: clippy
  image: rust:latest
  needs: ["format:parser"]
  cache:
    key: "parser"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - rustup component add clippy
    - rustc --version && cargo --version
    - cargo clippy -p rtlola-parser

clippy:macros:
  tags:
    - docker
  stage: clippy
  image: rust:latest
  needs: ["format:macros"]
  cache:
    key: "macros"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - rustup component add clippy
    - rustc --version && cargo --version
    - cargo clippy -p rtlola-macros

clippy:hir:
  tags:
    - docker
  stage: clippy
  image: rust:latest
  needs: ["format:hir"]
  cache:
    key: "hir"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - rustup component add clippy
    - rustc --version && cargo --version
    - cargo clippy -p rtlola-hir

clippy:frontend:
  tags:
    - docker
  stage: clippy
  image: rust:latest
  needs: ["format:frontend"]
  cache:
    key: "frontend"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - rustup component add clippy
    - rustc --version && cargo --version
    - cargo clippy -p rtlola-frontend

####### Check that every ignored test has an accompanying comment #######
ignored:reporting:
  tags:
    - docker
  stage: check-ignored-tests
  image: alpine:latest
  needs: ["clippy:reporting"]
  script:
    - apk update && apk add --no-cache bash
    - ./check_ignored_tests_without_comment.sh rtlola-reporting

ignored:parser:
  tags:
    - docker
  stage: check-ignored-tests
  image: alpine:latest
  needs: ["clippy:parser"]
  script:
    - apk update && apk add --no-cache bash
    - ./check_ignored_tests_without_comment.sh rtlola-parser

ignored:macros:
  tags:
    - docker
  stage: check-ignored-tests
  image: alpine:latest
  needs: ["clippy:macros"]
  script:
    - apk update && apk add --no-cache bash
    - ./check_ignored_tests_without_comment.sh rtlola-macros

ignored:hir:
  tags:
    - docker
  stage: check-ignored-tests
  image: alpine:latest
  needs: ["clippy:hir"]
  script:
    - apk update && apk add --no-cache bash
    - ./check_ignored_tests_without_comment.sh rtlola-hir

ignored:frontend:
  tags:
    - docker
  stage: check-ignored-tests
  image: alpine:latest
  needs: ["clippy:frontend"]
  script:
    - apk update && apk add --no-cache bash
    - ./check_ignored_tests_without_comment.sh rtlola-frontend

####### Use cargo to test the project on stable toolchain #######
test:reporting:
  tags:
    - docker
  stage: test
  image: rust:latest
  needs: ["ignored:reporting"]
  cache:
    key: "reporting"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends libpcap-dev
    - rustc --version && cargo --version
    - cargo test -p rtlola-reporting --verbose

test:parser:
  tags:
    - docker
  stage: test
  image: rust:latest
  needs: ["ignored:parser"]
  cache:
    key: "parser"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends libpcap-dev
    - rustc --version && cargo --version
    - cargo test -p rtlola-parser --verbose

test:macros:
  tags:
    - docker
  stage: test
  image: rust:latest
  needs: ["ignored:macros"]
  cache:
    key: "macros"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends libpcap-dev
    - rustc --version && cargo --version
    - cargo test -p rtlola-macros --verbose

test:hir:
  tags:
    - docker
  stage: test
  image: rust:latest
  needs: ["ignored:hir"]
  cache:
    key: "hir"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends libpcap-dev
    - rustc --version && cargo --version
    - cargo test -p rtlola-hir --verbose

test:frontend:
  tags:
    - docker
  stage: test
  image: rust:latest
  needs: ["ignored:frontend"]
  cache:
    key: "frontend"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends libpcap-dev
    - rustc --version && cargo --version
    - cargo test -p rtlola-frontend --verbose

####### Use cargo to test the project on stable toolchain on windows #######

test:windows:
  stage: additional-test
  needs: ["test:reporting", "test:parser", "test:macros", "test:hir", "test:frontend"]
  variables:
    CARGO_HOME: "C:\\Users\\react\\.cargo"
  tags:
    - windows
    - rust
  script:
    - rustup update
    - rustc --version
    - cargo --version
    - cargo test --all --verbose

####### Use cargo to test the project on nightly toolchain #######
test:nightly:
  tags:
    - docker
  stage: additional-test
  image: rustlang/rust:nightly
  needs: ["test:reporting", "test:parser", "test:macros", "test:hir", "test:frontend"]
  cache:
    key: "nightly"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  variables:
    RUSTFLAGS: "-Zinstrument-coverage -Zgcc-ld=lld"
    LLVM_PROFILE_FILE: "json5format-%m.profraw"
  script:
    - (rm -r ./target/debug/coverage/) || true
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends libpcap-dev python3-pip
    - pip3 install junit-xml
    - curl -L https://github.com/mozilla/grcov/releases/download/v0.6.1/grcov-linux-x86_64.tar.bz2 | tar jxf -
    - cargo install cargo2junit
    - rustup component add llvm-tools-preview
    - rustc --version && cargo --version      # Print version info for debugging
    - (cargo test -- -Z unstable-options --format json | $CARGO_HOME/bin/cargo2junit > results.xml) || true # ignore the return code so that we can show the complete output (including ignored tests)
    - ./grcov . --binary-path ./target/debug/ -s . -t html --branch --ignore-not-existing --llvm -o ./target/debug/coverage/
    - cat ./target/debug/coverage/index.html
    - cargo test --all --verbose
  allow_failure: true
  coverage: '/linesPercentage \w+">\d+\.\d+ /'
  artifacts:
    when: always
    paths:
      - crates/target/debug/coverage/
    reports:
      junit: crates/results.xml

test:wasm:
  stage: additional-test
  needs: ["test:reporting", "test:parser", "test:macros", "test:hir", "test:frontend"]
  tags:
    - docker
  image: rust:latest
  cache:
    key: "wasm"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - rustup update
    - rustup target add wasm32-unknown-unknown
    - rustc --version
    - cargo --version
    - cargo check --target wasm32-unknown-unknown

####### Use cargo to test the docs for broken links #######

doc:reporting:
  tags:
    - docker
  stage: docs
  image: rust:latest
  needs: ["test:reporting"]
  variables:
    RUSTDOCFLAGS: "-Dwarnings"
  allow_failure: true
  cache:
    key: "reporting"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - rustc --version && cargo --version
    - cargo doc -p rtlola-reporting --no-deps --verbose

doc:parser:
  tags:
    - docker
  stage: docs
  image: rust:latest
  needs: ["test:parser"]
  variables:
    RUSTDOCFLAGS: "-Dwarnings"
  allow_failure: true
  cache:
    key: "parser"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - rustc --version && cargo --version
    - cargo doc -p rtlola-parser --no-deps --verbose

doc:macros:
  tags:
    - docker
  stage: docs
  image: rust:latest
  needs: ["test:macros"]
  variables:
    RUSTDOCFLAGS: "-Dwarnings"
  allow_failure: true
  cache:
    key: "macros"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - rustc --version && cargo --version
    - cargo doc -p rtlola-macros --no-deps --verbose

doc:hir:
  tags:
    - docker
  stage: docs
  image: rust:latest
  needs: ["test:hir"]
  variables:
    RUSTDOCFLAGS: "-Dwarnings"
  allow_failure: true
  cache:
    key: "hir"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - rustc --version && cargo --version
    - cargo doc -p rtlola-hir --no-deps --verbose

doc:frontend:
  tags:
    - docker
  stage: docs
  image: rust:latest
  needs: ["test:frontend"]
  variables:
    RUSTDOCFLAGS: "-Dwarnings"
  allow_failure: true
  cache:
    key: "frontend"
    policy: pull-push
    paths:
      - crates/target/
      - $CARGO_HOME
  script:
    - rustc --version && cargo --version
    - cargo doc -p rtlola-frontend --no-deps --verbose
